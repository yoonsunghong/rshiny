else if(box$col_lesssecondchance[i] == 1 & box$win[i] == 0){
box$secondchance_loss_opp[i] <- 1
}
}
secondchance_win <- as.data.frame(aggregate(box$secondchance_win, by=list(Teams = box$team_abr), FUN = sum))
teams$secondchance_win <- secondchance_win$x
secondchance_loss <- as.data.frame(aggregate(box$secondchance_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$secondchance_loss <- secondchance_loss$x
secondchance_win_opp <- as.data.frame(aggregate(box$secondchance_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$secondchance_win_opp <- secondchance_win_opp$x
secondchance_loss_opp <- as.data.frame(aggregate(box$secondchance_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$secondchance_loss_opp <- secondchance_loss_opp$x
#====Fast break points
box$col_morefastbreak <- rep(0,nrow(box))
box$col_lessfastbreak <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$fastbreak_points[(2*i)-1]>box$fastbreak_points[2*i]){
box$col_morefastbreak[(2*i)-1] <- 1
box$col_lessfastbreak[(2*i)] <- 1
}
else if (box$fastbreak_points[(2*i)] > box$fastbreak_points[(2*i)-1]) {
box$col_lessfastbreak[(2*i)-1] <- 1
box$col_morefastbreak[(2*i)] <- 1
}
else if (box$fastbreak_points[(2*i)] == box$fastbreak_points[(2*i)]) {
box$col_morefastbreak[2*i] <- 1
box$col_morefastbreak[(2*i)-1] <- 1
}
}
box$fastbreak_win <- rep(0, nrow(box))
box$fastbreak_loss <- rep(0, nrow(box))
box$fastbreak_win_opp <- rep(0, nrow(box))
box$fastbreak_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_morefastbreak[i] == 1 & box$win[i] == 1){
box$fastbreak_win[i] <- 1
}
else if(box$col_lessfastbreak[i] == 1 & box$win[i] == 1){
box$fastbreak_win_opp[(i)] <- 1
}
else if(box$col_morefastbreak[i] == 1 & box$win[i] == 0){
box$fastbreak_loss[i] <- 1
}
else if(box$col_lessfastbreak[i] == 1 & box$win[i] == 0){
box$fastbreak_loss_opp[i] <- 1
}
}
fastbreak_win <- as.data.frame(aggregate(box$fastbreak_win, by=list(Teams = box$team_abr), FUN = sum))
teams$fastbreak_win <- fastbreak_win$x
fastbreak_loss <- as.data.frame(aggregate(box$fastbreak_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$fastbreak_loss <- fastbreak_loss$x
fastbreak_win_opp <- as.data.frame(aggregate(box$fastbreak_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$fastbreak_win_opp <- fastbreak_win_opp$x
fastbreak_loss_opp <- as.data.frame(aggregate(box$fastbreak_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$fastbreak_loss_opp <- fastbreak_loss_opp$x
#====Points in the paint
box$col_morepaint <- rep(0,nrow(box))
box$col_lesspaint <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$points_in_the_paint[(2*i)-1]>box$points_in_the_paint[2*i]){
box$col_morepaint[(2*i)-1] <- 1
box$col_lesspaint[(2*i)] <- 1
}
else if (box$points_in_the_paint[(2*i)] > box$points_in_the_paint[(2*i)-1]) {
box$col_lesspaint[(2*i)-1] <- 1
box$col_morepaint[(2*i)] <- 1
}
else if (box$points_in_the_paint[(2*i)] == box$points_in_the_paint[(2*i)]) {
box$col_morepaint[2*i] <- 1
box$col_morepaint[(2*i)-1] <- 1
}
}
box$paint_win <- rep(0, nrow(box))
box$paint_loss <- rep(0, nrow(box))
box$paint_win_opp <- rep(0, nrow(box))
box$paint_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_morepaint[i] == 1 & box$win[i] == 1){
box$paint_win[i] <- 1
}
else if(box$col_lesspaint[i] == 1 & box$win[i] == 1){
box$paint_win_opp[(i)] <- 1
}
else if(box$col_morepaint[i] == 1 & box$win[i] == 0){
box$paint_loss[i] <- 1
}
else if(box$col_lesspaint[i] == 1 & box$win[i] == 0){
box$paint_loss_opp[i] <- 1
}
}
paint_win <- as.data.frame(aggregate(box$paint_win, by=list(Teams = box$team_abr), FUN = sum))
teams$paint_win <- paint_win$x
paint_loss <- as.data.frame(aggregate(box$paint_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$paint_loss <- paint_loss$x
paint_win_opp <- as.data.frame(aggregate(box$paint_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$paint_win_opp <- paint_win_opp$x
paint_loss_opp <- as.data.frame(aggregate(box$paint_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$paint_loss_opp <- paint_loss_opp$x
#====quarter performance
team_order <- box$team_abr #setting the list of the teams aside for later identification
game_order <- box$game_no
col_quarter_date <- which(colnames(box_2) == "Game.Game_info.Game_date")
col_quarter_start1 <- which(colnames(box_2) == "Game.Msg_score.Visitor_team_score.Qtr_1_score")
col_quarter_end1 <- which(colnames(box_2) == "Game.Msg_score.Visitor_team_score.Qtr_4_score")
col_quarter_start2 <- which(colnames(box_2) == "Game.Msg_score.Home_team_score.Qtr_1_score")
col_quarter_end2 <- which(colnames(box_2) == "Game.Msg_score.Home_team_score.Qtr_4_score")
sort_1 <- box_2[, c(1,col_quarter_date,col_quarter_start1:col_quarter_end1)]
sort_2 <- box_2[, col_quarter_start2:col_quarter_end2]
sort_1 <- unique(sort_1)
sort_1 <- na.omit(sort_1)
sort_2 <- unique(sort_2)
sort_2 <- na.omit(sort_2)
box_2 <- cbind(sort_1,sort_2)
box$firstq <- rep(0, nrow(box))
box$secondq <- rep(0, nrow(box))
box$thirdq <- rep(0, nrow(box))
for(i in 1:(nrow(box)/2)){
box$firstq[(2*i)-1] <- box_2$Game.Msg_score.Visitor_team_score.Qtr_1_score[i]
box$secondq[(2*i)-1] <- box_2$Game.Msg_score.Visitor_team_score.Qtr_2_score[i]
box$thirdq[(2*i)-1] <- box_2$Game.Msg_score.Visitor_team_score.Qtr_3_score[i]
box$firstq[(2*i)] <- box_2$Game.Msg_score.Home_team_score.Qtr_1_score[i]
box$secondq[2*i] <- box_2$Game.Msg_score.Home_team_score.Qtr_2_score[i]
box$thirdq[2*i] <- box_2$Game.Msg_score.Home_team_score.Qtr_3_score[i]
}
box$firstq <- as.numeric(box$firstq)
box$secondq <- as.numeric(box$secondq)
box$thirdq <- as.numeric(box$thirdq)
#===First qurater
box$col_morefirst <- rep(0,nrow(box))
box$col_lessfirst <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$firstq[(2*i)-1]>box$firstq[2*i]){
box$col_morefirst[(2*i)-1] <- 1
box$col_lessfirst[(2*i)] <- 1
}
else if (box$firstq[(2*i)] > box$firstq[(2*i)-1]) {
box$col_lessfirst[(2*i)-1] <- 1
box$col_morefirst[(2*i)] <- 1
}
else if (box$firstq[(2*i)] == box$firstq[(2*i)]) {
box$col_morefirst[2*i] <- 1
box$col_morefirst[(2*i)-1] <- 1
}
}
box$first_win <- rep(0, nrow(box))
box$first_loss <- rep(0, nrow(box))
box$first_win_opp <- rep(0, nrow(box))
box$first_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_morefirst[i] == 1 & box$win[i] == 1){
box$first_win[i] <- 1
}
else if(box$col_lessfirst[i] == 1 & box$win[i] == 1){
box$first_win_opp[(i)] <- 1
}
else if(box$col_morefirst[i] == 1 & box$win[i] == 0){
box$first_loss[i] <- 1
}
else if(box$col_lessfirst[i] == 1 & box$win[i] == 0){
box$first_loss_opp[i] <- 1
}
}
first_win <- as.data.frame(aggregate(box$first_win, by=list(Teams = box$team_abr), FUN = sum))
teams$first_win <- first_win$x
first_loss <- as.data.frame(aggregate(box$first_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$first_loss <- first_loss$x
first_win_opp <- as.data.frame(aggregate(box$first_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$first_win_opp <- first_win_opp$x
first_loss_opp <- as.data.frame(aggregate(box$first_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$first_loss_opp <- first_loss_opp$x
#leading at halftime
box$secondq <- box$firstq + box$secondq #making points cumulative at quarter marks
box$thirdq <- box$secondq + box$thirdq
box$col_moresecond <- rep(0,nrow(box))
box$col_lesssecond <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$secondq[(2*i)-1]>box$secondq[2*i]){
box$col_moresecond[(2*i)-1] <- 1
box$col_lesssecond[(2*i)] <- 1
}
else if (box$secondq[(2*i)] > box$secondq[(2*i)-1]) {
box$col_lesssecond[(2*i)-1] <- 1
box$col_moresecond[(2*i)] <- 1
}
else if (box$secondq[(2*i)] == box$secondq[(2*i)]) {
box$col_moresecond[2*i] <- 1
box$col_moresecond[(2*i)-1] <- 1
}
}
box$second_win <- rep(0, nrow(box))
box$second_loss <- rep(0, nrow(box))
box$second_win_opp <- rep(0, nrow(box))
box$second_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_moresecond[i] == 1 & box$win[i] == 1){
box$second_win[i] <- 1
}
else if(box$col_lesssecond[i] == 1 & box$win[i] == 1){
box$second_win_opp[(i)] <- 1
}
else if(box$col_moresecond[i] == 1 & box$win[i] == 0){
box$second_loss[i] <- 1
}
else if(box$col_lesssecond[i] == 1 & box$win[i] == 0){
box$second_loss_opp[i] <- 1
}
}
second_win <- as.data.frame(aggregate(box$second_win, by=list(Teams = box$team_abr), FUN = sum))
teams$second_win <- second_win$x
second_loss <- as.data.frame(aggregate(box$second_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$second_loss <- second_loss$x
second_win_opp <- as.data.frame(aggregate(box$second_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$second_win_opp <- second_win_opp$x
second_loss_opp <- as.data.frame(aggregate(box$second_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$second_loss_opp <- second_loss_opp$x
#====Third quarter
box$col_morethird <- rep(0,nrow(box))
box$col_lessthird <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$thirdq[(2*i)-1]>box$thirdq[2*i]){
box$col_morethird[(2*i)-1] <- 1
box$col_lessthird[(2*i)] <- 1
}
else if (box$thirdq[(2*i)] > box$thirdq[(2*i)-1]) {
box$col_lessthird[(2*i)-1] <- 1
box$col_morethird[(2*i)] <- 1
}
else if (box$thirdq[(2*i)] == box$thirdq[(2*i)]) {
box$col_morethird[2*i] <- 1
box$col_morethird[(2*i)-1] <- 1
}
}
box$third_win <- rep(0, nrow(box))
box$third_loss <- rep(0, nrow(box))
box$third_win_opp <- rep(0, nrow(box))
box$third_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_morethird[i] == 1 & box$win[i] == 1){
box$third_win[i] <- 1
}
else if(box$col_lessthird[i] == 1 & box$win[i] == 1){
box$third_win_opp[(i)] <- 1
}
else if(box$col_morethird[i] == 1 & box$win[i] == 0){
box$third_loss[i] <- 1
}
else if(box$col_lessthird[i] == 1 & box$win[i] == 0){
box$third_loss_opp[i] <- 1
}
}
third_win <- as.data.frame(aggregate(box$third_win, by=list(Teams = box$team_abr), FUN = sum))
teams$third_win <- third_win$x
third_loss <- as.data.frame(aggregate(box$third_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$third_loss <- third_loss$x
third_win_opp <- as.data.frame(aggregate(box$third_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$third_win_opp <- third_win_opp$x
third_loss_opp <- as.data.frame(aggregate(box$third_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$third_loss_opp <- third_loss_opp$x
#====Back to back
box_2$Game.Game_info.Game_date <- as.Date(box_2$Game.Game_info.Game_date, format = "%m/%d/%Y")
box$date <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
box$date[(2*i)-1] <- box_2$Game.Game_info.Game_date[i]
box$date[2*i] <- box_2$Game.Game_info.Game_date[i]
}
box_3 <- arrange(box, team_abr, date)
box_3$datediff <- rep(0, nrow(box))
for(i in 2:(nrow(box))) {
box_3$datediff[i] <- box_3$date[i] - box_3$date[i-1]
}
box_3$backtoback <- rep(0,nrow(box))
for(i in 1:nrow(box)){
if(box_3$datediff[i] == 1) {
box_3$backtoback[i] <- 1
}
}
box_3 <- arrange(box_3, game_no, desc(awaywin), homewin)
box$backtoback <- box_3$backtoback
box$backtoback_win <- rep(0, nrow(box))
box$backtoback_loss <- rep(0, nrow(box))
for(i in 1:nrow(box)){
if(box$backtoback[i] == 1 & box$win[i] == 1){
box$backtoback_win[i] <- 1
box$backtoback_loss[i] <- 0
}
else if (box$backtoback[i] == 1 & box$win[i] == 0){
box$backtoback_win[i] <- 0
box$backtoback_loss[i] <- 1
}
else{
box$backtoback_win[i] <- 0
box$backtoback_loss[i] <- 0
}
}
backtoback_win <- as.data.frame(aggregate(box$backtoback_win, by=list(Teams = box$team_abr), FUN = sum))
teams$backtoback_win <- backtoback_win$x
backtoback_loss <- as.data.frame(aggregate(box$backtoback_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$backtoback_loss <- backtoback_loss$x
#==== bench
bench_col_start <- which(colnames(box_bench) =="Game.Msg_boxscore.Player_stats.Team_abr")
bench_col_1 <- which(colnames(box_bench)=="Game.Msg_boxscore.Player_stats.Starting_position")
bench_col_end <- which(colnames(box_bench)=="Game.Msg_boxscore.Player_stats.Points")
box_bench <- box_bench[,c(1,bench_col_start,bench_col_1,bench_col_end)]
box_bench <- na.omit(box_bench)
box_bench <- box_bench %>%
filter(Game.Msg_boxscore.Player_stats.Starting_position != "")
bench_coef <- nrow(box_bench)/10
box_bench$ordering <- rep(c(1,1,1,1,1,0,0,0,0,0), bench_coef)
box_bench_sum <- aggregate(box_bench$Game.Msg_boxscore.Player_stats.Points, list(box_bench$Game.Msg_boxscore.Player_stats.Team_abr, box_bench$Game.Number, box_bench$ordering), FUN = sum) # should be fixed here
box_bench_sum <- arrange(box_bench_sum, Group.2, desc(Group.3))
box$starters <- box_bench_sum$x #i actually have the aggregate points for the starters. I will use this to calculate the bench points.
box$bench <- box$points - box$starters
#== now the actual loop part - More or equal bench points as opponent
box$col_morebench <- rep(0,nrow(box))
box$col_lessbench <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$bench[(2*i)-1]>box$bench[2*i]){
box$col_morebench[(2*i)-1] <- 1
box$col_lessbench[(2*i)] <- 1
}
else if (box$bench[(2*i)] > box$bench[(2*i)-1]) {
box$col_lessbench[(2*i)-1] <- 1
box$col_morebench[(2*i)] <- 1
}
else if (box$bench[(2*i)] == box$bench[(2*i)]) {
box$col_morebench[2*i] <- 1
box$col_morebench[(2*i)-1] <- 1
}
}
box$bench_win <- rep(0, nrow(box))
box$bench_loss <- rep(0, nrow(box))
box$bench_win_opp <- rep(0, nrow(box))
box$bench_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_morebench[i] == 1 & box$win[i] == 1){
box$bench_win[i] <- 1
}
else if(box$col_lessbench[i] == 1 & box$win[i] == 1){
box$bench_win_opp[(i)] <- 1
}
else if(box$col_morebench[i] == 1 & box$win[i] == 0){
box$bench_loss[i] <- 1
}
else if(box$col_lessbench[i] == 1 & box$win[i] == 0){
box$bench_loss_opp[i] <- 1
}
}
bench_win <- as.data.frame(aggregate(box$bench_win, by=list(Teams = box$team_abr), FUN = sum))
teams$bench_win <- bench_win$x
bench_loss <- as.data.frame(aggregate(box$bench_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$bench_loss <- bench_loss$x
bench_win_opp <- as.data.frame(aggregate(box$bench_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$bench_win_opp <- bench_win_opp$x
bench_loss_opp <- as.data.frame(aggregate(box$bench_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$bench_loss_opp <- bench_loss_opp$x
#====Turnovers
box$moreturnovers <- rep(0,nrow(box))
box$lessturnovers <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$turnovers[(2*i)-1]>box$turnovers[2*i]){
box$moreturnovers[(2*i)-1] <- 1
box$lessturnovers[(2*i)] <- 1
}
else if (box$turnovers[(2*i)] > box$turnovers[(2*i)-1]) {
box$lessturnovers[(2*i)-1] <- 1
box$moreturnovers[(2*i)] <- 1
}
else if (box$turnovers[(2*i)] == box$turnovers[(2*i)]) {
box$moreturnovers[2*i] <- 1
box$lessturnovers[(2*i)-1] <- 1
}
}
box$turnovers_win <- rep(0, nrow(box))
box$turnovers_loss <- rep(0, nrow(box))
box$turnovers_win_opp <- rep(0, nrow(box))
box$turnovers_loss_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$moreturnovers[i] == 1 & box$win[i] == 1){
box$turnovers_win[i] <- 1
}
else if(box$lessturnovers[i] == 1 & box$win[i] == 1){
box$turnovers_win_opp[(i)] <- 1
}
else if(box$moreturnovers[i] == 1 & box$win[i] == 0){
box$turnovers_loss[i] <- 1
}
else if(box$lessturnovers[i] == 1 & box$win[i] == 0){
box$turnovers_loss_opp[i] <- 1
}
}
turnovers_win <- as.data.frame(aggregate(box$turnovers_win, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_win <- turnovers_win$x
turnovers_loss <- as.data.frame(aggregate(box$turnovers_loss, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_loss <- turnovers_loss$x
turnovers_win_opp <- as.data.frame(aggregate(box$turnovers_win_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_win_opp <- turnovers_win_opp$x
turnovers_loss_opp <- as.data.frame(aggregate(box$turnovers_loss_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_loss_opp <- turnovers_loss_opp$x
#====Turnover points
box$col_moreturnovers <- rep(0,nrow(box))
box$col_lessturnovers <- rep(0,nrow(box))
for(i in 1:(nrow(box)/2)) {
if(box$pointsoffturnovers[(2*i)-1]>box$pointsoffturnovers[2*i]){
box$col_moreturnovers[(2*i)-1] <- 1
box$col_lessturnovers[(2*i)] <- 1
}
else if (box$pointsoffturnovers[(2*i)] > box$pointsoffturnovers[(2*i)-1]) {
box$col_lessturnovers[(2*i)-1] <- 1
box$col_moreturnovers[(2*i)] <- 1
}
else if (box$pointsoffturnovers[(2*i)] == box$pointsoffturnovers[(2*i)]) {
box$col_moreturnovers[2*i] <- 1
box$col_moreturnovers[(2*i)-1] <- 1
}
}
box$turnovers_win_points <- rep(0, nrow(box))
box$turnovers_loss_points <- rep(0, nrow(box))
box$turnovers_win_points_opp <- rep(0, nrow(box))
box$turnovers_loss_points_opp <- rep(0, nrow(box))
for(i in 1:(nrow(box))){
if(box$col_moreturnovers[i] == 1 & box$win[i] == 1){
box$turnovers_win_points[i] <- 1
}
else if(box$col_lessturnovers[i] == 1 & box$win[i] == 1){
box$turnovers_win_points_opp[(i)] <- 1
}
else if(box$col_moreturnovers[i] == 1 & box$win[i] == 0){
box$turnovers_loss_points[i] <- 1
}
else if(box$col_lessturnovers[i] == 1 & box$win[i] == 0){
box$turnovers_loss_points_opp[i] <- 1
}
}
turnovers_win_points <- as.data.frame(aggregate(box$turnovers_win_points, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_win_points <- turnovers_win_points$x
turnovers_loss_points <- as.data.frame(aggregate(box$turnovers_loss_points, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_loss_points <- turnovers_loss_points$x
turnovers_win_points_opp <- as.data.frame(aggregate(box$turnovers_win_points_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_win_points_opp <- turnovers_win_points_opp$x
turnovers_loss_points_opp <- as.data.frame(aggregate(box$turnovers_loss_points_opp, by=list(Teams = box$team_abr), FUN = sum))
teams$turnovers_loss_points_opp <- turnovers_loss_points_opp$x
##====little bit of sorting
teams <- teams[,c(1,2,4,5,9,6,10,11:86)]
teams$label1 <- rep("Win", nrow(teams))
teams$label2 <- rep("Loss", nrow(teams))
teams <- teams[c(1,84,85,2:83)]
##====loop and save
for (i in 1:30) {
#dir.create(paste0(savePath, teams$teams[i]))
data1 <- data.frame(matrix(teams[i, 2:85], ncol = 2, byrow = TRUE))
row.names(data1) <-
c("Variables", "Overall...", "Home...", "Away...", "Decided by three points or less...", "Score 100-plus...", "Score 99 or below...", "Opponents score 100-plus...", "Opponents score 99 or below...", "Outshooting opponent ...", "Outshot by opponent...", "More rebounds than opponent ...", "Fewer rebounds than opponent...", "More assists than opponent ...", "Fewer assists than opponent...", "More FTA than opponent ...", "Fewer FTA than opponent...", "More 3FG than opponent ...", "Fewer 3FG than opponent...", "More steals than opponent ...", "Fewer steals than opponent...", "More blocks than opponent ...", "Fewer blocks than opponent...", "More 2nd-chance points than opponent ...", "Fewer 2nd-chance points than opponent...", "More fastbreak points than opponent ...", "Fewer fastbreak points than opponent...", "More points in the paint than opponent ...", "Fewer points in the paint than opponent...", "Leading after first quarter ...", "Trailing after first quarter...", "Leading at halftime ...", "Trailing at halftime...", "Leading after third quarter ...", "Trailing after third quarter...", "Second game of back-to-back...", "More bench points than the opponents ...", "Fewer bench points than the opponents...", "More TO's than opponent (tied)...", "Fewer TO's than opponent", "More PTS off TO's than opponent (tied)...", "Fewer PTS off TO's than opponent")
data1 <- apply(data1, 2, as.character)
write.table(data1, file = paste0(savePath, teams$teams[i],'.csv'), row.names = c("Variables", "Overall...", "Home...", "Away...", "Decided by three points or less...", "Score 100-plus...", "Score 99 or below...", "Opponents score 100-plus...", "Opponents score 99 or below...", "Outshooting opponent (tied)...", "Outshot by opponent...", "More rebounds than opponent (tied)...", "Fewer rebounds than opponent...", "More assists than opponent (tied)...", "Fewer assists than opponent...", "More FTA than opponent (tied)...", "Fewer FTA than opponent...", "More 3FG than opponent (tied)...", "Fewer 3FG than opponent...", "More steals than opponent (tied)...", "Fewer steals than opponent...", "More blocks than opponent (tied)...", "Fewer blocks than opponent...", "More 2nd-chance points than opponent (tied)...", "Fewer 2nd-chance points than opponent...", "More fastbreak points than opponent (tied)...", "Fewer fastbreak points than opponent...", "More points in the paint than opponent (tied)...", "Fewer points in the paint than opponent...", "Leading after first quarter (tied)...", "Trailing after first quarter...", "Leading at halftime (tied)...", "Trailing at halftime...", "Leading after third quarter (tied)...", "Trailing after third quarter...", "Second game of back-to-back...", "More bench points than the opponents (tied)...", "Fewer bench points than the opponents...","More TO's than opponent (tied)...", "Fewer TO's than opponent", "More PTS off TO's than opponent (tied)...", "Fewer PTS off TO's than opponent"),
col.names = c("", ""), sep= ",")
}
#extracting the data
miguel <- get_artist_audio_features("Miguel")
#reviewing the structure
str(miguel)
#first, selecting just the variables we need/want to display
miguel <- miguel %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(miguel, track_popularity > 75)
#first, selecting just the variables we need/want to display
miguel <- miguel %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(miguel, track_popularity > 60)
filter(miguel, track_name == "Sky Walker")
filter(miguel, track_name == "Sky Walker")
filter(miguel, track_name == "Sky Walker")
filter(miguel, track_name == "Sky Walker")
filter(miguel, track_name == "Sky Walker")
filter(miguel, track_name == "Sky Walker")
#first, selecting just the variables we need/want to display
miguel <- miguel %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(miguel, track_popularity > 55)
#first, selecting just the variables we need/want to display
miguel <- miguel %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(miguel, track_popularity > 60)
#extracting the data
frank <- get_artist_audio_features("Frank Ocean")
#extracting the data
frank <- get_artist_audio_features("Frank Ocean")
#reviewing the structure
str(frank)
#first, selecting just the variables we need/want to display
frank <- frank %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(frank, track_popularity > 70)
filter(frank, track_name == "Chanel")
filter(frank, track_name == "Chanel")
filter(frank, track_name == "Chanel")
filter(frank, track_name == "Chanel")
frank$track_name
#extracting the data
frank <- get_artist_audio_features("Frank Ocean")
#reviewing the structure
str(frank)
frank$track_name
#first, selecting just the variables we need/want to display
frank <- frank %>%
select(track_name, album_name, track_popularity)
#filtering using dplyr function
filter(frank, track_popularity > 70)
